// RUN: %target-sil-opt -enable-sil-verify-all %s -sil-combine | %FileCheck %s

// REQUIRES: swift_in_compiler

import Builtin
import Swift
import SwiftShims

class Buffer {}

sil_global @_swiftEmptyArrayStorage : $_SwiftEmptyArrayStorage

// CHECK-LABEL: sil [ossa] @remove_end_begin_cow_pair
// CHECK-NOT: end_cow_mutation
// CHECK-NOT: begin_cow_mutation
// CHECK:     return %0
// CHECK: } // end sil function 'remove_end_begin_cow_pair'
sil [ossa] @remove_end_begin_cow_pair : $@convention(thin) (@owned Buffer) -> @owned Buffer {
bb0(%0 : @owned $Buffer):
  %e = end_cow_mutation %0 : $Buffer
  debug_value %e : $Buffer, var, name "x"
  (%u, %b) = begin_cow_mutation %e : $Buffer
  return %b : $Buffer
}

// CHECK-LABEL: sil [ossa] @dont_remove_end_begin_cow_pair1
// CHECK:   end_cow_mutation
// CHECK:   begin_cow_mutation
// CHECK: } // end sil function 'dont_remove_end_begin_cow_pair1'
sil [ossa] @dont_remove_end_begin_cow_pair1 : $@convention(thin) (@owned Buffer) -> @owned (Buffer, Buffer) {
bb0(%0 : @owned $Buffer):
  %e = end_cow_mutation %0 : $Buffer
  %c = copy_value %e : $Buffer
  (%u, %b) = begin_cow_mutation %e : $Buffer
  %t = tuple (%c : $Buffer, %b : $Buffer)
  return %t : $(Buffer, Buffer)
}

// CHECK-LABEL: sil [ossa] @dont_remove_end_begin_cow_pair2
// CHECK:   end_cow_mutation
// CHECK:   begin_cow_mutation
// CHECK: } // end sil function 'dont_remove_end_begin_cow_pair2'
sil [ossa] @dont_remove_end_begin_cow_pair2 : $@convention(thin) (@owned Buffer) -> @owned (Builtin.Int1, Buffer) {
bb0(%0 : @owned $Buffer):
  %e = end_cow_mutation %0 : $Buffer
  (%u, %b) = begin_cow_mutation %e : $Buffer
  %t = tuple (%u : $Builtin.Int1, %b : $Buffer)
  return %t : $(Builtin.Int1, Buffer)
}

// CHECK-LABEL: sil [ossa] @remove_begin_end_cow_pair
// CHECK-NOT: end_cow_mutation
// CHECK-NOT: begin_cow_mutation
// CHECK:     return %0
// CHECK: } // end sil function 'remove_begin_end_cow_pair'
sil [ossa] @remove_begin_end_cow_pair : $@convention(thin) (@owned Buffer) -> @owned Buffer {
bb0(%0 : @owned $Buffer):
  (%u, %b) = begin_cow_mutation %0 : $Buffer
  debug_value %u : $Builtin.Int1, var, name "x"
  debug_value %b : $Buffer, var, name "y"
  %e = end_cow_mutation %b : $Buffer
  return %e : $Buffer
}

// CHECK-LABEL: sil [ossa] @dont_remove_begin_end_cow_pair1
// CHECK:   begin_cow_mutation
// CHECK:   end_cow_mutation
// CHECK: } // end sil function 'dont_remove_begin_end_cow_pair1'
sil [ossa] @dont_remove_begin_end_cow_pair1 : $@convention(thin) (@owned Buffer) -> @owned (Buffer, Buffer) {
bb0(%0 : @owned $Buffer):
  (%u, %b) = begin_cow_mutation %0 : $Buffer
  %c = copy_value %b : $Buffer
  %e = end_cow_mutation %b : $Buffer
  %t = tuple (%c : $Buffer, %e : $Buffer)
  return %t : $(Buffer, Buffer)
}

// CHECK-LABEL: sil [ossa] @dont_remove_begin_end_cow_pair2
// CHECK:   begin_cow_mutation
// CHECK:   end_cow_mutation
// CHECK: } // end sil function 'dont_remove_begin_end_cow_pair2'
sil [ossa] @dont_remove_begin_end_cow_pair2 : $@convention(thin) (@owned Buffer) -> @owned (Builtin.Int1, Buffer) {
bb0(%0 : @owned $Buffer):
  (%u, %b) = begin_cow_mutation %0 : $Buffer
  %e = end_cow_mutation %b : $Buffer
  %t = tuple (%u : $Builtin.Int1, %e : $Buffer)
  return %t : $(Builtin.Int1, Buffer)
}

// CHECK-LABEL: sil @optimize_empty_cow_singleton
// CHECK:   [[I:%[0-9]+]] = integer_literal $Builtin.Int1, 0
// CHECK:   begin_cow_mutation
// CHECK:   [[T:%[0-9]+]] = tuple ([[I]]
// CHECK:   return [[T]]
// CHECK: } // end sil function 'optimize_empty_cow_singleton'
sil @optimize_empty_cow_singleton : $@convention(thin) () -> (Builtin.Int1, @owned Builtin.BridgeObject) {
bb0:
  %3 = global_addr @_swiftEmptyArrayStorage : $*_SwiftEmptyArrayStorage
  %4 = address_to_pointer %3 : $*_SwiftEmptyArrayStorage to $Builtin.RawPointer
  %5 = raw_pointer_to_ref %4 : $Builtin.RawPointer to $__EmptyArrayStorage
  %6 = unchecked_ref_cast %5 : $__EmptyArrayStorage to $Builtin.BridgeObject
  (%u, %b) = begin_cow_mutation %6 : $Builtin.BridgeObject
  %t = tuple (%u : $Builtin.Int1, %b : $Builtin.BridgeObject)
  return %t : $(Builtin.Int1, Builtin.BridgeObject)
}

sil_global private @outlined_global : $_ContiguousArrayStorage<Int>

// CHECK-LABEL: sil @remove_arc_of_global_value
// CHECK-NOT:   retain
// CHECK-NOT:   release
// CHECK-NOT:   fix_lifetime
// CHECK-NOT:   debug_value
// CHECK:     } // end sil function 'remove_arc_of_global_value'
sil @remove_arc_of_global_value : $@convention(thin) () -> Int {
bb0:
  %0 = global_value @outlined_global : $_ContiguousArrayStorage<Int>
  strong_retain %0 : $_ContiguousArrayStorage<Int>
  debug_value %0 : $_ContiguousArrayStorage<Int>, let, name "x"
  %2 = upcast %0 : $_ContiguousArrayStorage<Int> to $__ContiguousArrayStorageBase
  strong_retain %2 : $__ContiguousArrayStorageBase
  %13 = ref_tail_addr [immutable] %2 : $__ContiguousArrayStorageBase, $Int
  %16 = load %13 : $*Int
  fix_lifetime %0 : $_ContiguousArrayStorage<Int>
  strong_release %2 : $__ContiguousArrayStorageBase
  strong_release %0 : $_ContiguousArrayStorage<Int>
  return %16 : $Int
}

// CHECK-LABEL: sil @remove_copy_block_simple
// CHECK-NOT:     copy_block
// CHECK:         apply {{%[0-9]+}}(%0)
// CHECK-NOT:     strong_release
// CHECK:       } // end sil function 'remove_copy_block_simple'
sil @remove_copy_block_simple : $@convention(c) (@convention(block) () -> ()) -> () {
bb0(%0 : $@convention(block) () -> ()):
  %1 = copy_block %0 : $@convention(block) () -> ()
  %2 = function_ref @non_escaping_block : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  %3 = apply %2(%1) : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  strong_release %1 : $@convention(block) () -> ()
  return %3 : $()
}

// CHECK-LABEL: sil [ossa] @remove_copy_block_ossa
// CHECK-NOT:     copy_block
// CHECK:         apply {{%[0-9]+}}(%0)
// CHECK-NOT:     destroy_value
// CHECK:       } // end sil function 'remove_copy_block_ossa'
sil [ossa] @remove_copy_block_ossa : $@convention(c) (@convention(block) () -> ()) -> () {
bb0(%0 : @unowned $@convention(block) () -> ()):
  %1 = copy_block %0 : $@convention(block) () -> ()
  %2 = function_ref @non_escaping_block : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  %3 = apply %2(%1) : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  destroy_value %1 : $@convention(block) () -> ()
  return %3 : $()
}

// CHECK-LABEL: sil @remove_copy_block_two_releases
// CHECK-NOT:     copy_block
// CHECK:         apply {{%[0-9]+}}(%0)
// CHECK-NOT:     strong_release
// CHECK:       } // end sil function 'remove_copy_block_two_releases'
sil @remove_copy_block_two_releases : $@convention(c) (@convention(block) () -> ()) -> () {
bb0(%0 : $@convention(block) () -> ()):
  %1 = copy_block %0 : $@convention(block) () -> ()
  %2 = function_ref @non_escaping_block : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  %3 = apply %2(%1) : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  cond_br undef, bb1, bb2
bb1:
  strong_release %1 : $@convention(block) () -> ()
  br bb3
bb2:
  strong_release %1 : $@convention(block) () -> ()
  br bb3
bb3:
  return %3 : $()
}

// CHECK-LABEL: sil @dont_remove_escaping_copy_block
// CHECK:         [[B:%[0-9]+]] = copy_block %0
// CHECK:         apply {{%[0-9]+}}([[B]])
// CHECK:         strong_release [[B]]
// CHECK:       } // end sil function 'dont_remove_escaping_copy_block'
sil @dont_remove_escaping_copy_block : $@convention(c) (@convention(block) () -> ()) -> () {
bb0(%0 : $@convention(block) () -> ()):
  %1 = copy_block %0 : $@convention(block) () -> ()
  %2 = function_ref @escaping_block : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  %3 = apply %2(%1) : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  strong_release %1 : $@convention(block) () -> ()
  return %3 : $()
}

// CHECK-LABEL: sil @dont_remove_copy_block_with_missing_release
// CHECK:         [[B:%[0-9]+]] = copy_block %0
// CHECK:         strong_release [[B]]
// CHECK:         apply {{%[0-9]+}}([[B]])
// CHECK:       } // end sil function 'dont_remove_copy_block_with_missing_release'
sil @dont_remove_copy_block_with_missing_release : $@convention(c) (@convention(block) () -> ()) -> () {
bb0(%0 : $@convention(block) () -> ()):
  %1 = copy_block %0 : $@convention(block) () -> ()
  cond_br undef, bb1, bb2
bb1:
  strong_release %1 : $@convention(block) () -> ()
  br bb3
bb2:
  %2 = function_ref @take_block : $@convention(thin) (@owned @convention(block) () -> ()) -> ()
  %3 = apply %2(%1) : $@convention(thin) (@owned @convention(block) () -> ()) -> ()
  br bb3
bb3:
  %r = tuple ()
  return %r : $()
}

// CHECK-LABEL: sil [ossa] @dont_remove_non_argument_copy_block
// CHECK:         [[B:%[0-9]+]] = copy_block %0
// CHECK:         apply {{%[0-9]+}}([[B]])
// CHECK:         destroy_value [[B]]
// CHECK:       } // end sil function 'dont_remove_non_argument_copy_block'
sil [ossa] @dont_remove_non_argument_copy_block : $@convention(c) (@owned @callee_guaranteed () -> ()) -> () {
bb0(%0 : @owned $@callee_guaranteed () -> ()):
  %1 = alloc_stack $@block_storage @callee_guaranteed () -> ()
  %2 = project_block_storage %1 : $*@block_storage @callee_guaranteed () -> ()
  store %0 to [init] %2 : $*@callee_guaranteed () -> ()
  %t = function_ref @thunkForCalleeGuaranteed : $@convention(c) (@inout_aliasable @block_storage @callee_guaranteed () -> ()) -> ()
  %4 = init_block_storage_header %1 : $*@block_storage @callee_guaranteed () -> (), invoke %t : $@convention(c) (@inout_aliasable @block_storage @callee_guaranteed () -> ()) -> (), type $@convention(block) () -> ()
  %5 = copy_block %4 : $@convention(block) () -> ()
  destroy_addr %2 : $*@callee_guaranteed() -> ()
  dealloc_stack %1 : $*@block_storage @callee_guaranteed () -> ()

  %8 = function_ref @non_escaping_block : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  %9 = apply %8(%5) : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()
  destroy_value %5 : $@convention(block) () -> ()
  return %9 : $()
}

sil @non_escaping_block : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> () {
[%0: noescape **]
}

sil @escaping_block : $@convention(thin) (@guaranteed @convention(block) () -> ()) -> ()

sil @take_block : $@convention(thin) (@owned @convention(block) () -> ()) -> () {
[%0: noescape **]
}

sil [reabstraction_thunk] @thunkForCalleeGuaranteed : $@convention(c) (@inout_aliasable @block_storage @callee_guaranteed () -> ()) -> ()

